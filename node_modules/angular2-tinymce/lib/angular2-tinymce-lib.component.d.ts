import { OnDestroy, AfterViewInit, NgZone, OnInit, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TinymceOptions } from './angular2-tinymce-lib.config.interface';
import 'tinymce/tinymce.min';
import 'tinymce/themes/modern/theme';
import 'tinymce/plugins/link/plugin.js';
import 'tinymce/plugins/paste/plugin.js';
import 'tinymce/plugins/table/plugin.js';
import 'tinymce/plugins/advlist/plugin.js';
import 'tinymce/plugins/autoresize/plugin.js';
import 'tinymce/plugins/lists/plugin.js';
import 'tinymce/plugins/code/plugin.js';
import * as ɵngcc0 from '@angular/core';
export declare class TinymceComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnDestroy {
    private zone;
    private globalOptions;
    optionsOverride: TinymceOptions;
    click: EventEmitter<{}>;
    dblclick: EventEmitter<{}>;
    mousedown: EventEmitter<{}>;
    mouseup: EventEmitter<{}>;
    mousemove: EventEmitter<{}>;
    mouseover: EventEmitter<{}>;
    mouseout: EventEmitter<{}>;
    mouseenter: EventEmitter<{}>;
    mouseleave: EventEmitter<{}>;
    keydown: EventEmitter<{}>;
    keypress: EventEmitter<{}>;
    keyup: EventEmitter<{}>;
    contextmenu: EventEmitter<{}>;
    paste: EventEmitter<{}>;
    init: EventEmitter<{}>;
    focus: EventEmitter<{}>;
    blur: EventEmitter<{}>;
    beforeSetContent: EventEmitter<{}>;
    setContent: EventEmitter<{}>;
    getContent: EventEmitter<{}>;
    preProcess: EventEmitter<{}>;
    postProcess: EventEmitter<{}>;
    nodeChange: EventEmitter<{}>;
    undo: EventEmitter<{}>;
    redo: EventEmitter<{}>;
    change: EventEmitter<{}>;
    dirty: EventEmitter<{}>;
    remove: EventEmitter<{}>;
    execCommand: EventEmitter<{}>;
    pastePreProcess: EventEmitter<{}>;
    pastePostProcess: EventEmitter<{}>;
    elementId: string;
    editor: any;
    private onTouchedCallback;
    private onChangeCallback;
    private innerValue;
    private options;
    constructor(zone: NgZone, globalOptions: TinymceOptions);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    value: any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setupEvents(editor: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TinymceComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TinymceComponent, "app-tinymce", ["tinymce"], { "optionsOverride": "options"; }, { "click": "click"; "dblclick": "dblclick"; "mousedown": "mousedown"; "mouseup": "mouseup"; "mousemove": "mousemove"; "mouseover": "mouseover"; "mouseout": "mouseout"; "mouseenter": "mouseenter"; "mouseleave": "mouseleave"; "keydown": "keydown"; "keypress": "keypress"; "keyup": "keyup"; "contextmenu": "contextmenu"; "paste": "paste"; "init": "init"; "focus": "focus"; "blur": "blur"; "beforeSetContent": "beforeSetContent"; "setContent": "setContent"; "getContent": "getContent"; "preProcess": "preProcess"; "postProcess": "postProcess"; "nodeChange": "nodeChange"; "undo": "undo"; "redo": "redo"; "change": "change"; "dirty": "dirty"; "remove": "remove"; "execCommand": "execCommand"; "pastePreProcess": "pastePreProcess"; "pastePostProcess": "pastePostProcess"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjItdGlueW1jZS1saWIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFuZ3VsYXIyLXRpbnltY2UtbGliLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgTmdab25lLCBPbkluaXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBUaW55bWNlT3B0aW9ucyB9IGZyb20gJy4vYW5ndWxhcjItdGlueW1jZS1saWIuY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQgJ3RpbnltY2UvdGlueW1jZS5taW4nO1xuaW1wb3J0ICd0aW55bWNlL3RoZW1lcy9tb2Rlcm4vdGhlbWUnO1xuaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvbGluay9wbHVnaW4uanMnO1xuaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvcGFzdGUvcGx1Z2luLmpzJztcbmltcG9ydCAndGlueW1jZS9wbHVnaW5zL3RhYmxlL3BsdWdpbi5qcyc7XG5pbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9hZHZsaXN0L3BsdWdpbi5qcyc7XG5pbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9hdXRvcmVzaXplL3BsdWdpbi5qcyc7XG5pbXBvcnQgJ3RpbnltY2UvcGx1Z2lucy9saXN0cy9wbHVnaW4uanMnO1xuaW1wb3J0ICd0aW55bWNlL3BsdWdpbnMvY29kZS9wbHVnaW4uanMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGlueW1jZUNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBZnRlclZpZXdJbml0LCBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHByaXZhdGUgZ2xvYmFsT3B0aW9ucztcbiAgICBvcHRpb25zT3ZlcnJpZGU6IFRpbnltY2VPcHRpb25zO1xuICAgIGNsaWNrOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGRibGNsaWNrOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIG1vdXNlZG93bjogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBtb3VzZXVwOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIG1vdXNlbW92ZTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBtb3VzZW92ZXI6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgbW91c2VvdXQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgbW91c2VlbnRlcjogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBtb3VzZWxlYXZlOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGtleWRvd246IEV2ZW50RW1pdHRlcjx7fT47XG4gICAga2V5cHJlc3M6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAga2V5dXA6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY29udGV4dG1lbnU6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgcGFzdGU6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgaW5pdDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBmb2N1czogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBibHVyOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGJlZm9yZVNldENvbnRlbnQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgc2V0Q29udGVudDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBnZXRDb250ZW50OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIHByZVByb2Nlc3M6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgcG9zdFByb2Nlc3M6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgbm9kZUNoYW5nZTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICB1bmRvOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIHJlZG86IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIGRpcnR5OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIHJlbW92ZTogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBleGVjQ29tbWFuZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBwYXN0ZVByZVByb2Nlc3M6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgcGFzdGVQb3N0UHJvY2VzczogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBlbGVtZW50SWQ6IHN0cmluZztcbiAgICBlZGl0b3I6IGFueTtcbiAgICBwcml2YXRlIG9uVG91Y2hlZENhbGxiYWNrO1xuICAgIHByaXZhdGUgb25DaGFuZ2VDYWxsYmFjaztcbiAgICBwcml2YXRlIGlubmVyVmFsdWU7XG4gICAgcHJpdmF0ZSBvcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKHpvbmU6IE5nWm9uZSwgZ2xvYmFsT3B0aW9uczogVGlueW1jZU9wdGlvbnMpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICB2YWx1ZTogYW55O1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICBzZXR1cEV2ZW50cyhlZGl0b3I6IGFueSk6IHZvaWQ7XG59XG4iXX0=